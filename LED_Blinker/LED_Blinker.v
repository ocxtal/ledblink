//`#start header` -- edit after this line, do not edit this line
// ========================================
//
// Copyright YOUR COMPANY, THE YEAR
// All Rights Reserved
// UNPUBLISHED, LICENSED SOFTWARE.
//
// CONFIDENTIAL AND PROPRIETARY INFORMATION
// WHICH IS THE PROPERTY OF your company.
//
// ========================================
`include "cypress.v"
//`#end` -- edit above this line, do not edit this line

//`#start body` -- edit after this line, do not edit this line

//        Your code goes here

/**
 * @module LED_Blinker
 *
 * @brief 16-bit LED blinking pattern generator
 */
module LED_Blinker(
	output led,
	input  clk,
	input  enable,
	input  reset
);

	/**
	 * synchronize clk with bus_clk
	 */
	wire clk_intl;
	cy_psoc3_udb_clock_enable_v1_0 #(.sync_mode(`TRUE)) ClkSync
    (
        /* input  */    .clock_in(clk),
        /* input  */    .enable(enable),
        /* output */    .clock_out(clk_intl)
    );

	/**
	 * 4bit counter (as a former part of the datapath state generator)
	 */
	wire [6:0] cnt4_out;
	cy_psoc3_count7 #(.cy_period(7'b0001111), .cy_route_ld(`FALSE), .cy_route_en(`TRUE))
	cnt4 (
		/* input */ .clock(clk_intl),				// Clock
		/* input */ .reset(reset),					// Reset
		/* input */ .load(1'b0),					// Load signal used if cy_route_ld = TRUE
		/* input */ .enable(enable),				// Enable signal used if cy_route_en = TRUE
		/* output [6:0] */ .count(cnt4_out[6:0]), 	// Counter value output
		/* output */ .tc() 							// Terminal Count output
	);
	
	/**
	 * datapath state generation logic
	 */
	function [2:0] dp_state_gen;
		input [3:0] counter;
		if(counter[3:1] == 3'b111) begin
			dp_state_gen = {2'b00, counter[0]};
		end else begin
			dp_state_gen = {2'b01, counter[0]};
		end
	endfunction
	
	/**
	 * assign output of state generation logic to intermediate wire
	 */
	wire [2:0] state = dp_state_gen(cnt4_out[3:0]);

	/**
	 * instanciate datapath (automatically generated by datapath configuration tool)
	 */
	wire dp_shift_out;
	cy_psoc3_dp8 #(.cy_dpconfig_a(
	{
		`CS_ALU_OP_PASS, `CS_SRCA_A0, `CS_SRCB_D0,
		`CS_SHFT_OP___SL, `CS_A0_SRC__ALU, `CS_A1_SRC_NONE,
		`CS_FEEDBACK_DSBL, `CS_CI_SEL_CFGA, `CS_SI_SEL_CFGA,
		`CS_CMP_SEL_CFGA, /*CFGRAM0:    */
		`CS_ALU_OP_PASS, `CS_SRCA_A1, `CS_SRCB_D0,
		`CS_SHFT_OP___SL, `CS_A0_SRC___D0, `CS_A1_SRC___D1,
		`CS_FEEDBACK_DSBL, `CS_CI_SEL_CFGA, `CS_SI_SEL_CFGA,
		`CS_CMP_SEL_CFGA, /*CFGRAM1:    */
		`CS_ALU_OP_PASS, `CS_SRCA_A0, `CS_SRCB_D0,
		`CS_SHFT_OP___SL, `CS_A0_SRC__ALU, `CS_A1_SRC_NONE,
		`CS_FEEDBACK_DSBL, `CS_CI_SEL_CFGA, `CS_SI_SEL_CFGA,
		`CS_CMP_SEL_CFGA, /*CFGRAM2:    */
		`CS_ALU_OP_PASS, `CS_SRCA_A1, `CS_SRCB_D0,
		`CS_SHFT_OP___SL, `CS_A0_SRC_NONE, `CS_A1_SRC__ALU,
		`CS_FEEDBACK_DSBL, `CS_CI_SEL_CFGA, `CS_SI_SEL_CFGA,
		`CS_CMP_SEL_CFGA, /*CFGRAM3:    */
		`CS_ALU_OP_PASS, `CS_SRCA_A0, `CS_SRCB_D0,
		`CS_SHFT_OP_PASS, `CS_A0_SRC_NONE, `CS_A1_SRC_NONE,
		`CS_FEEDBACK_DSBL, `CS_CI_SEL_CFGA, `CS_SI_SEL_CFGA,
		`CS_CMP_SEL_CFGA, /*CFGRAM4:    */
		`CS_ALU_OP_PASS, `CS_SRCA_A0, `CS_SRCB_D0,
		`CS_SHFT_OP_PASS, `CS_A0_SRC_NONE, `CS_A1_SRC_NONE,
		`CS_FEEDBACK_DSBL, `CS_CI_SEL_CFGA, `CS_SI_SEL_CFGA,
		`CS_CMP_SEL_CFGA, /*CFGRAM5:    */
		`CS_ALU_OP_PASS, `CS_SRCA_A0, `CS_SRCB_D0,
		`CS_SHFT_OP_PASS, `CS_A0_SRC_NONE, `CS_A1_SRC_NONE,
		`CS_FEEDBACK_DSBL, `CS_CI_SEL_CFGA, `CS_SI_SEL_CFGA,
		`CS_CMP_SEL_CFGA, /*CFGRAM6:    */
		`CS_ALU_OP_PASS, `CS_SRCA_A0, `CS_SRCB_D0,
		`CS_SHFT_OP_PASS, `CS_A0_SRC_NONE, `CS_A1_SRC_NONE,
		`CS_FEEDBACK_DSBL, `CS_CI_SEL_CFGA, `CS_SI_SEL_CFGA,
		`CS_CMP_SEL_CFGA, /*CFGRAM7:    */
		8'hFF, 8'h00,  /*CFG9:    */
		8'hFF, 8'hFF,  /*CFG11-10:    */
		`SC_CMPB_A1_D1, `SC_CMPA_A1_D1, `SC_CI_B_ARITH,
		`SC_CI_A_ARITH, `SC_C1_MASK_DSBL, `SC_C0_MASK_DSBL,
		`SC_A_MASK_DSBL, `SC_DEF_SI_1, `SC_SI_B_DEFSI,
		`SC_SI_A_DEFSI, /*CFG13-12:    */
		`SC_A0_SRC_ACC, `SC_SHIFT_SL, 1'h0,
		1'h0, `SC_FIFO1_BUS, `SC_FIFO0_BUS,
		`SC_MSB_DSBL, `SC_MSB_BIT0, `SC_MSB_NOCHN,
		`SC_FB_NOCHN, `SC_CMP1_NOCHN,
		`SC_CMP0_NOCHN, /*CFG15-14:    */
		10'h00, `SC_FIFO_CLK__DP,`SC_FIFO_CAP_AX,
		`SC_FIFO_LEVEL,`SC_FIFO__SYNC,`SC_EXTCRC_DSBL,
		`SC_WRK16CAT_DSBL /*CFG17-16:    */
	}
	)) dp(
		/*  input                   */  .reset(1'b0),
		/*  input                   */  .clk(clk_intl),
		/*  input   [02:00]         */  .cs_addr(state),
		/*  input                   */  .route_si(1'b0),
		/*  input                   */  .route_ci(1'b0),
		/*  input                   */  .f0_load(1'b0),
		/*  input                   */  .f1_load(1'b0),
		/*  input                   */  .d0_load(1'b0),
		/*  input                   */  .d1_load(1'b0),
		/*  output                  */  .ce0(),
		/*  output                  */  .cl0(),
		/*  output                  */  .z0(),
		/*  output                  */  .ff0(),
		/*  output                  */  .ce1(),
		/*  output                  */  .cl1(),
		/*  output                  */  .z1(),
		/*  output                  */  .ff1(),
		/*  output                  */  .ov_msb(),
		/*  output                  */  .co_msb(),
		/*  output                  */  .cmsb(),
		/*  output                  */  .so(dp_shift_out),
		/*  output                  */  .f0_bus_stat(),
		/*  output                  */  .f0_blk_stat(),
		/*  output                  */  .f1_bus_stat(),
		/*  output                  */  .f1_blk_stat()
	);
	
	/**
	 * connect output of the datapath to led
	 */
	assign led = dp_shift_out;

endmodule

//`#end` -- edit above this line, do not edit this line

//`#start footer` -- edit after this line, do not edit this line

/**
 * end of LED_Blinker.v
 */

//`#end` -- edit above this line, do not edit this line


//[] END OF FILE




